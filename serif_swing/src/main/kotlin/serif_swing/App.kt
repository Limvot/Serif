/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package xyz.room409.serif.serif_swing
import xyz.room409.serif.serif_shared.*
import xyz.room409.serif.serif_shared.db.DriverFactory

import java.util.concurrent.LinkedBlockingQueue
import kotlin.concurrent.thread

import javax.swing.*;
import javax.swing.text.*;
import java.awt.*;
import java.awt.event.*;

import com.formdev.flatlaf.*

class App {
    val queue = LinkedBlockingQueue<String>()
    var mstate: MatrixState = MatrixLogin()
    var frame = JFrame("Serif")

    val version: String
        get() {
            return mstate.version + ", Swing UI"
        }

    fun run() {
        // Each UI will create it's specific DriverFactory
        // And call this function before the backend can get
        // information out of the database
        Database.initDb(DriverFactory())

        frame.defaultCloseOperation = JFrame.EXIT_ON_CLOSE
        constructStateView()
        frame.pack()
        frame.setVisible(true)

    }

    fun transition(new_state: MatrixState) {
        // TODO: update current view if new_state is the same type as mstate
        mstate = new_state
        constructStateView()
    }

    fun constructStateView() {
        frame.contentPane.removeAll()
        var panel = JPanel()
        when (val m = mstate) {
            is MatrixLogin -> {
                var gridbag = GridBagLayout()
                panel.layout = gridbag
                var c_left = GridBagConstraints()
                c_left.anchor = GridBagConstraints.EAST
                c_left.gridwidth = GridBagConstraints.RELATIVE
                c_left.fill = GridBagConstraints.NONE
                c_left.weightx = 0.0

                var c_right = GridBagConstraints()
                c_right.anchor = GridBagConstraints.EAST
                c_right.gridwidth = GridBagConstraints.REMAINDER
                c_right.fill = GridBagConstraints.HORIZONTAL
                c_right.weightx = 1.0

                panel.add(JLabel(m.login_message), c_right)
                panel.add(JLabel("Login with previous session?"), c_right)

                val onSync = { transition(mstate.refresh()) }

                for (session in m.getSessions()) {
                    var button = JButton(session)
                    panel.add(button, c_right)
                    button.addActionListener({ transition(m.loginFromSession(session, onSync)) })
                }

                var username_field = JTextField(20)
                var username_label = JLabel("Username: ")
                username_label.labelFor = username_field
                panel.add(username_label, c_left)
                panel.add(username_field, c_right)
                

                var password_field = JPasswordField(20)
                var password_label = JLabel("Password: ")
                password_label.labelFor = password_field
                panel.add(password_label, c_left)
                panel.add(password_field, c_right)

                var button = JButton("Login")
                panel.add(button, c_right)

                var logIn: (ActionEvent) -> Unit = { transition(m.login(username_field.text, password_field.text, onSync)) }
                password_field.addActionListener(logIn)
                button.addActionListener(logIn)
            }
            is MatrixRooms -> {
                panel.layout = BoxLayout(panel, BoxLayout.PAGE_AXIS)
                panel.add(JLabel(m.message))

                //var scroll_pane = JScrollPane(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS)
                //var inner_scroll_pane = JPanel()
                //inner_scroll_pane.layout = BoxLayout(inner_scroll_pane, BoxLayout.PAGE_AXIS)
                //inner_scroll_pane.preferredSize = Dimension(100,600)
                for ((id, name) in m.rooms) {
                    var button = JButton("$id - $name")
                    //inner_scroll_pane.add(button)
                    panel.add(button)
                    button.addActionListener({ transition(m.getRoom(id)) })
                }
                //scroll_pane.add(inner_scroll_pane)
                //panel.add(scroll_pane)

                var back_button = JButton("(Fake) Logout")
                panel.add(back_button)
                back_button.addActionListener({ transition(m.fake_logout()) })
            }
            is MatrixChatRoom -> {
                var gridbag = GridBagLayout()
                panel.layout = gridbag
                var c_left = GridBagConstraints()
                c_left.anchor = GridBagConstraints.EAST
                c_left.gridwidth = GridBagConstraints.RELATIVE
                c_left.fill = GridBagConstraints.NONE
                c_left.weightx = 0.0

                var c_right = GridBagConstraints()
                c_right.anchor = GridBagConstraints.EAST
                c_right.gridwidth = GridBagConstraints.REMAINDER
                c_right.fill = GridBagConstraints.HORIZONTAL
                c_right.weightx = 1.0

                for ((sender, message) in m.messages) {
                    panel.add(JLabel("$sender:  "), c_left)
                    panel.add(JLabel(message), c_right)
                }
                var message_field = JTextField(20)
                panel.add(message_field, c_left)
                var send_button = JButton("Send")
                panel.add(send_button, c_right)
                val onSend: (ActionEvent) -> Unit = { transition(m.sendMessage(message_field.text)) }
                message_field.addActionListener(onSend)
                send_button.addActionListener(onSend)

                var back_button = JButton("Back")
                panel.add(back_button, c_right)
                back_button.addActionListener({ transition(m.exitRoom()) })
            }
        }
        frame.add(panel)
        frame.validate()
        frame.repaint()
    }
}

fun main(args: Array<String>) {
    FlatDarkLaf.install();
    javax.swing.SwingUtilities.invokeLater({ App().run() })
}
