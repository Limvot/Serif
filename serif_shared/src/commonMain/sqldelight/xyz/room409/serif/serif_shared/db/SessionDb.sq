CREATE TABLE IF NOT EXISTS SavedSessions (
 id INTEGER PRIMARY KEY NOT NULL,
 userId TEXT NOT NULL UNIQUE,
 authTok TEXT NOT NULL,
 nextBatch TEXT,
 transactionId INTEGER NOT NULL
);

deleteAllSessions:
DELETE FROM SavedSessions;

insertSession:
INSERT INTO SavedSessions(id, userId, authTok, nextBatch, transactionId)
VALUES(NULL,?,?,NULL,?);

updateSessionTransactionId:
UPDATE SavedSessions
SET transactionId = ?
WHERE id = ?;

updateSessionNextBatch:
UPDATE SavedSessions
SET nextBatch = ?
WHERE id = ?;

getSessionNextBatch:
SELECT nextBatch FROM SavedSessions
WHERE (id = ?);


selectAllSessions:
SELECT * FROM SavedSessions;

selectUserSession:
SELECT * FROM SavedSessions
WHERE userId = ?;

CREATE TABLE IF NOT EXISTS MediaCache (
 mxcUrl TEXT NOT NULL PRIMARY KEY,
 localPath TEXT NOT NULL
);

insertMedia:
INSERT INTO MediaCache(mxcUrl, localPath)
VALUES(?,?);

updateMedia:
UPDATE MediaCache
SET localPath = ?
WHERE mxcUrl = ?;

selectCachedMedia:
SELECT * FROM MediaCache
WHERE mxcUrl = ?;

CREATE TABLE IF NOT EXISTS ContactCache (
 sender TEXT NOT NULL PRIMARY KEY,
 displayName TEXT,
 avatarUrl TEXT
);

insertContact:
INSERT INTO ContactCache(sender, displayName, avatarUrl)
VALUES(?,?,?);

updateContact:
UPDATE ContactCache
SET displayName = ?, avatarUrl =?
WHERE sender = ?;

selectCachedContact:
SELECT * FROM ContactCache
WHERE sender = ?;

deleteAllCache:
DELETE FROM MediaCache;



CREATE TABLE IF NOT EXISTS RoomSummary (
    sessionId INTEGER NOT NULL,
    id TEXT NOT NULL,
    name TEXT NOT NULL,
    unread_notif_count INTEGER NOT NULL,
    unread_highlight_count INTEGER NOT NULL,
    last_event TEXT,
    PRIMARY KEY (sessionId, id)
);

getRooms:
SELECT * FROM RoomSummary
WHERE (sessionId = ? );

getRoom:
SELECT * FROM RoomSummary
WHERE (sessionId = ? AND id = ? )
LIMIT 1;

insertRoomSummary:
INSERT INTO RoomSummary(sessionId, id, name, unread_notif_count, unread_highlight_count, last_event)
VALUES(?,?,?,?,?,?);

updateRoomSummary:
UPDATE RoomSummary
SET name = ?, unread_notif_count = ?, unread_highlight_count = ?, last_event = ?
WHERE(sessionId = ? AND id = ?);



CREATE TABLE IF NOT EXISTS RoomState (
 sessionId INTEGER NOT NULL,
 roomId TEXT NOT NULL,
 type TEXT NOT NULL,
 stateKey TEXT NOT NULL,
 data TEXT NOT NULL,
 PRIMARY KEY (sessionId, roomId, type, stateKey)
);

insertStateEvent:
INSERT INTO RoomState(sessionId, roomId, type, stateKey, data)
VALUES(?,?,?,?,?);

updateStateEvent:
UPDATE RoomState
SET data = ?
WHERE (sessionId = ? AND roomId = ? AND type = ? AND stateKey = ?);

getStateEvent:
SELECT data FROM RoomState
WHERE (sessionId = ? AND roomId = ? AND type = ? AND stateKey = ?);

getStateEvents:
SELECT data FROM RoomState
WHERE (sessionId = ? AND roomId = ?);



CREATE TABLE IF NOT EXISTS RoomEvents (
 seqId TEXT PRIMARY KEY NOT NULL,
 sessionId INTEGER NOT NULL,
 roomId TEXT NOT NULL,
 eventId TEXT NOT NULL,
 data TEXT NOT NULL,
 relatedEvent TEXT,
 prevBatch TEXT
);
CREATE UNIQUE INDEX IF NOT EXISTS RoomEventIndex ON RoomEvents (sessionId, roomId, eventId);
CREATE INDEX IF NOT EXISTS RelatedEventIndex ON RoomEvents (sessionId, relatedEvent);

minId:
SELECT MIN(seqId) FROM RoomEvents;

maxId:
SELECT MAX(seqId) FROM RoomEvents;

maxIdLessThan:
SELECT MAX(seqId) FROM RoomEvents
WHERE (seqId < ?);

addRoomEvent:
INSERT INTO RoomEvents(seqId, sessionId, roomId, eventId, data, relatedEvent, prevBatch)
VALUES(?,?,?,?,?,?,?);

updatePrevBatch:
UPDATE RoomEvents
SET prevBatch = ?
WHERE (sessionId = ? AND roomId = ? AND eventId = ?);

getRoomEventAndIdx:
SELECT data,seqId,prevBatch FROM RoomEvents
WHERE (sessionId = ? AND roomId = ? AND eventId = ?)
LIMIT 1;

getRoomEventsBackwardsFromPointReversed:
SELECT data,seqId,prevBatch FROM RoomEvents
WHERE (sessionId = ? AND roomId = ?) AND (seqId < ?)
ORDER BY seqId DESC
LIMIT ?;

getRoomEventsForwardsFromPoint:
SELECT data,seqId,prevBatch FROM RoomEvents
WHERE (sessionId = ? AND roomId = ?) AND (seqId > ?)
ORDER BY seqId ASC
LIMIT ?;

getMostRecentRoomEvent:
SELECT data,seqId,prevBatch FROM RoomEvents
WHERE (sessionId = ? AND roomId = ?)
ORDER BY seqId DESC
LIMIT 1;

getRelatedEvents:
SELECT data,seqId FROM RoomEvents
WHERE (sessionId = ? AND roomId = ?) AND (relatedEvent IN ?);
